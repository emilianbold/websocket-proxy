name: Build and Release

on:
  push:
    tags:
      - 'v*'  # Trigger on version tags like v1.0.0
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

env:
  JAVA_VERSION: '11'

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'

    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: Build with Maven
      run: mvn clean compile test package

    - name: Verify build artifacts
      run: |
        ls -la target/
        echo "Standalone JAR size:"
        du -h target/websocket-proxy-*-standalone.jar
        echo "Regular JAR size:"
        du -h target/websocket-proxy-*.jar | grep -v standalone
        echo "Dependencies count:"
        ls target/lib/ | wc -l

    - name: Test proxy help command
      run: |
        echo "Testing proxy standalone JAR..."
        timeout 5 java -jar target/websocket-proxy-*-standalone.jar --help || true

    - name: Test validator help command  
      run: |
        echo "Testing validator standalone JAR..."
        timeout 5 java -cp target/websocket-proxy-*-standalone.jar com.websocket.proxy.SchemaValidator --help || true

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: websocket-proxy-jars
        path: |
          target/websocket-proxy-*-standalone.jar
          target/websocket-proxy-*.jar
          target/lib/
        retention-days: 30

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    
    permissions:
      contents: write
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'

    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: Build release artifacts
      run: mvn clean package

    - name: Get version from tag
      id: get_version
      run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

    - name: Create launcher scripts archive
      run: |
        mkdir -p release-package
        cp run-proxy.sh run-validator.sh release-package/
        cp target/websocket-proxy-*-standalone.jar release-package/
        cp -r schemas release-package/
        cp README.md SCHEMA_VALIDATION.md release-package/
        
        # Create archive
        cd release-package
        zip -r ../websocket-proxy-${{ steps.get_version.outputs.VERSION }}-complete.zip .
        cd ..
        
        # Create checksums
        sha256sum target/websocket-proxy-*-standalone.jar > checksums.txt
        sha256sum websocket-proxy-${{ steps.get_version.outputs.VERSION }}-complete.zip >> checksums.txt

    - name: Create Release with Assets
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ steps.get_version.outputs.VERSION }}
        name: WebSocket Proxy ${{ steps.get_version.outputs.VERSION }}
        draft: false
        prerelease: false
        files: |
          target/websocket-proxy-1.0.0-standalone.jar
          websocket-proxy-${{ steps.get_version.outputs.VERSION }}-complete.zip
          checksums.txt
        body: |
          ## WebSocket Proxy with JSON-RPC Logging ${{ steps.get_version.outputs.VERSION }}
          
          ### Features
          - Transparent WebSocket proxying with full session logging
          - JSON-RPC 2.0 message parsing and validation
          - PCAP file generation for Wireshark analysis
          - Schema validation tool for message compliance
          
          ### Downloads
          - **websocket-proxy-1.0.0-standalone.jar**: All-in-one executable JAR
          - **websocket-proxy-${{ steps.get_version.outputs.VERSION }}-complete.zip**: Complete package with scripts and schemas
          - **checksums.txt**: SHA256 checksums for verification
          
          ### Usage
          ```bash
          # Run the proxy
          java -jar websocket-proxy-1.0.0-standalone.jar -r example.com -p 9000 -l 8080
          
          # Or use the launcher script (from complete package)
          ./run-proxy.sh -r example.com -p 9000 -l 8080
          
          # Validate captured logs
          ./run-validator.sh --log-file logs/session_*.log --schema-dir schemas --format detailed
          ```
          
          See the included README.md for complete documentation.

  test-schemas:
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'

    - name: Build project
      run: mvn clean package

    - name: Test schema validation
      run: |
        # Create a test log file
        cat > test_session.log << 'EOF'
        [2024-01-01 10:00:00.123] [CONN_1] [CLIENT_TO_SERVER] {"jsonrpc":"2.0","method":"initialize","params":{"clientId":"test-client","clientVersion":"1.0.0"},"id":1}
        [2024-01-01 10:00:00.234] [CONN_1] [SERVER_TO_CLIENT] {"jsonrpc":"2.0","result":{"serverVersion":"2.0.0","capabilities":{}},"id":1}
        [2024-01-01 10:00:01.345] [CONN_1] [CLIENT_TO_SERVER] {"jsonrpc":"2.0","method":"getData","params":{"key":"value"},"id":2}
        [2024-01-01 10:00:01.456] [CONN_1] [SERVER_TO_CLIENT] {"jsonrpc":"2.0","result":{"data":"test"},"id":2}
        [2024-01-01 10:00:02.567] [CONN_1] [CLIENT_TO_SERVER] {"jsonrpc":"2.0","method":"invalidRequest"}
        [2024-01-01 10:00:02.678] [CONN_1] [SERVER_TO_CLIENT] {"jsonrpc":"2.0","error":{"code":-32600,"message":"Invalid Request"},"id":null}
        EOF
        
        # Test schema validation
        echo "Testing schema validation..."
        java -cp target/websocket-proxy-*-standalone.jar com.websocket.proxy.SchemaValidator \
          --log-file test_session.log \
          --schema-dir schemas \
          --format summary
          
        echo "Schema validation test completed successfully!"